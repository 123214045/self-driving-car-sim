using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class path_planner_bot : MonoBehaviour {
	
	private int update_status;
	private float x_drive;
	private float t_drive;
	private int moves;
	private bool movetarget;
	private Vector2 Target;
	private List<Vector2> targets;
	private int target_index = 0;
	private CircleCollider2D m_Collider;

	private List<GameObject> measure_markers;
	private List<GameObject> reference_markers;
	public GameObject footprint;
	private List<GameObject> footprints;

	// Use this for initialization
	void Start () {
		update_status = 0;
		x_drive = 0;
		t_drive = 0;
		moves = 0;

		m_Collider = GetComponent<CircleCollider2D>();
		footprints = new List<GameObject> ();

		Target = new Vector2 (0, 0);
		movetarget = false;

		//maze1 best solution
		//double[] target_x = {4.47475042083123, 1.7093802785176053, 1.6100797965473783,1.1251117243263145, 2.0171009627109155, 4.015501176032869,3.9430313805903867,4.442631433920876, 4.474126709133495};
		//double[] target_y = {1.9751262489479253, 1.3977589689603143, 0.984522457649321,1.1062022379177985, 4.516477915719522, 4.436499247346255,2.9883113697735553,2.9683167026802386, 4.017844238116676};

		//double[] target_x = {5.490000166665833, 1.9657051431661552, 1.06370646888077, 2.0076998272933437, 3.007699827293344, 3.363631749317756, 3.368985657746027,3.8562901729546315, 3.851290256287548, 1.8266952427877312, 1.238094307111754, 2.220877904461429, 5.243458227110881, 5.382633852958125,5.382633852958125, 3.903481232683882, 2.9674538690307504, 1.997517724588623, 0.9305879657022835,1.0571112619270517, 1.5567113152575407, 1.747522069006143, 2.050503026220242, 5.2581110353671345 };
		//double[] target_y = {1.4999500004166657, 1.4294547003226679, 3.2424697006983942, 4.4401764842113485, 4.440176484211347, 3.988582123214657, 3.9641621382731858, 4.07611886856354, 4.576093868771873, 4.5355965687178745, 1.5684137400871, 1.3836533526106916, 1.5046210885252604, 0.9725213373788912,0.6013980075600323, 1.7413443986208417, 1.497984838083883, 1.2302893214932284,0.7465622749965294, 0.7665569420898479, 1.0296467675371468, 1.7429682515579414, 0.34252158721950754 };

		/*
		double[] target_x = {5.497500041666458, 1.9732050181667802, 1.1816727723139868, 1.615339355003921, 4.051861931046938, 
			4.265580547802801, 3.993098309842778, 1.968503296342961, 1.0602291698095487, 1.4938957524994807, 2.393621276841023, 4.418621276841019, 5.01862127684102,
			5.0158713226741245, 3.523060891867653,
			3.4257714810121196, 4.408555078361795, 5.008075142358382, 5.032197024781921

		};
		double[] target_y =	{4.250012499895834, 4.320507799989831, 3.709380396108092, 1.73136161584891, 1.171577964397139,
			1.6236004780532183, 1.749113146721752, 1.7086158466677532, 2.1269914088961994, 4.105010189155382, 4.541466350583237, 4.541466350583237, 4.541466350583237,
			4.266480100468654, 3.9548039581744567,
			4.445247400923346, 4.630007788399755, 4.606014187887776, 4.599446479889933
		};
		*/

		/*
		double[] target_x = {5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.747500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.497500041666458, 5.22255503983315, 4.99760003833317, 4.747650036666525, 4.49770003499988, 4.222755033166572, 3.9728050314999286, 3.722855029833285, 3.4729050281666414, 3.222955026499998, 2.9730050248333546, 2.7230550231667108, 2.4731050215000674, 2.223155019833424, 1.9732050181667802, 1.7232550165001368, 1.4733050148334934, 1.2233550131668451, 0.9734050115001969, 0.748450010000214, 0.4985000083335658};
		double[] target_y = {4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.250012499895834, 4.2555121332365005, 4.2600118332425, 4.2650114999158335, 4.270011166589167, 4.275510799929833, 4.280510466603166, 4.2855101332764995, 4.290509799949832, 4.295509466623165, 4.300509133296498, 4.305508799969831, 4.310508466643165, 4.315508133316498, 4.320507799989831, 4.325507466663164, 4.330507133336497, 4.3355068000098305, 4.340506466683164, 4.3450061666891635, 4.350005833362497};
		*/


		double[] target_x = { 
			4.15, 3.25, 3.7, 6.5, 6.35, 6.29, 3.29, 1.45, 1.66, 1.38,
			1.38, 1.75, 1.54, 4.53, 6.69, 6.26, 6.36, 3.56, 3.46, 4.11
			
		};
		double[] target_y = {
			3.68, 2.74, 1.25, 1.37, 4.36, 5.61, 5.43, 5.32, 2.33, 0.9,
			0.9, 3.02, 5.36, 5.6, 5.2, 2.99, 1.6, 1.43, 3.48, 3.5
		};

		string taret_moves = "['move 1.58079632679 1.0', 'move 0.90331218674 1.0', 'move -0.45165609337 1.0', 'move -0.45165609337 0.6', 'move 1.58079632679 1.0', 'move -0.225828046685 0.7', 'move -1.35496828011 0.3']";

		targets = new List<Vector2> ();
		for (int i = 0; i < target_x.Length; i++) 
		{
			targets.Add(new Vector2((float)target_x[i],-(float)target_y[i]));
		}
			

		MoveTo (targets[target_index]);
		Debug.Log("distance traveled "+Vector2.Distance(transform.position,targets[target_index]));

	}

	void OnCollisionStay2D(Collision2D coll) 
	{
		
		//if (m_Collider.IsTouching(coll.collider))
		//{
			Debug.Log ("Collision!");
		//}
	}

	
	// Update is called once per frame
	void FixedUpdate () {

		 

		if (!movetarget) {

			if (target_index < targets.Count - 1) {
				target_index++;
				MoveTo (targets [target_index]);
				Debug.Log("distance traveled "+Vector2.Distance(targets[target_index],targets[target_index-1]));
			}


			x_drive = 0;
			t_drive = 0;

			//control
			if (Input.GetKey (KeyCode.UpArrow)) {
				x_drive = .025f;
			} else if (Input.GetKey (KeyCode.DownArrow)) {
				x_drive = -.025f;
			}
			if (Input.GetKey (KeyCode.RightArrow)) {
				t_drive = -3f;
			} else if (Input.GetKey (KeyCode.LeftArrow)) {
				t_drive = 3f;
			}

			if ((x_drive != 0 || t_drive != 0) ) 
			{
				transform.position += transform.right * x_drive;
				transform.Rotate (Vector3.forward * t_drive);

			}
		}
		else{

			float distance = Vector2.Distance (new Vector2 (transform.position.x, transform.position.y), Target);
			transform.position = Vector2.MoveTowards (new Vector2 (transform.position.x, transform.position.y), new Vector2 (Target.x, Target.y), Mathf.Min(distance,.025f));

			if (distance < .01) 
			{
				
				transform.position = Target;
				MakeFootprint (footprint, footprints, "footprint", Target.x, Target.y);

				Target = new Vector2 (0, 0);
				movetarget = false;
			}
		}
	
	}
	public void MoveTo(Vector2 set_target)
	{
		movetarget = true;
		Target = set_target;

		float angle = Vector2.Angle(Vector2.right, new Vector2 (set_target.x-transform.position.x, set_target.y-transform.position.y))*Mathf.Sign(set_target.y-transform.position.y);
		Debug.Log (angle);
		transform.rotation = Quaternion.AngleAxis (angle, Vector3.forward);
	}

	public void Move(float steering, float distance)
	{
		float new_angle = Mathf.Rad2Deg * steering + transform.rotation.eulerAngles.z;
		float new_x = transform.position.x + distance * Mathf.Cos (new_angle);
		float new_y = transform.position.y + distance * Mathf.Sin (new_angle);
		Vector2 new_target = new Vector2 (new_x, new_y);
		MoveTo (new_target);

	} 

	public void MakeFootprint(GameObject marker,List<GameObject> markers, string marker_name, float pos_x, float pos_y)
	{
		GameObject get_marker = (GameObject)Instantiate (marker);
		get_marker.name = marker_name+"_"+markers.Count;
		get_marker.transform.position = new Vector2 (pos_x, pos_y);
		markers.Add (get_marker);
	}
		
	public void resetStatus()
	{
		update_status = 0;
	}

	public float get_x()
	{
		return transform.position.x;
	}
	public float get_y()
	{
		return transform.position.y;
	}
	public float get_t()
	{
		return transform.eulerAngles.z;
	}

	public int getStatus()
	{
		return update_status;

	}
	public float getOdometry_x()
	{
		return x_drive;
	}
	public float getOdometry_t()
	{
		return t_drive;
	}
}
